{"ast":null,"code":"/*==================================================\r\n/src/store/thunks.js\r\n\r\nIt contains all Thunk Creators and Thunks.\r\n================================================== */\nimport * as ac from './actions/actionCreators'; // Import Action Creators (\"ac\" keyword Action Creator)\n\nconst axios = require('axios'); //All Campuses\n// THUNK CREATOR:\n\n\nexport const fetchAllCampusesThunk = () => async dispatch => {\n  // The THUNK\n  try {\n    // API \"get\" call to get \"campuses\" data from database\n    let res = await axios.get(`/api/campuses`); // Call Action Creator to return Action object (type + payload with \"campuses\" data)\n    // Then dispatch the Action object to Reducer to update state \n\n    dispatch(ac.fetchAllCampuses(res.data));\n    console.log(res.data, \" Hello\");\n  } catch (err) {\n    console.error(err);\n  }\n}; // Add Campus\n// THUNK CREATOR:\n\nexport const addCampusThunk = campus => async dispatch => {\n  // The THUNK\n  try {\n    // API \"post\" call to add \"student\" object's data to database\n    let res = await axios.post(`/api/campuses`, campus); // Call Action Creator to return Action object (type + payload with new students data)\n    // Then dispatch the Action object to Reducer to update state \n\n    dispatch(ac.addCampus(res.data));\n    return res.data;\n  } catch (err) {\n    console.error(err);\n  }\n}; // Delete campus\n// THUNK CREATOR:\n\nexport const deleteCampusThunk = campusID => async dispatch => {\n  // The THUNK\n  try {\n    // API \"delete\" call to delete student (based on \"studentID\") from database\n    await axios.delete(`/api/campuses/${campusID}`); // Delete successful so change state with dispatch\n\n    dispatch(ac.deleteCampus(campusID));\n  } catch (err) {\n    console.error(err);\n  }\n}; // Edit Campus\n// THUNK CREATOR:\n\nexport const editCampusThunk = campus => async dispatch => {\n  // The THUNK\n  try {\n    // API \"put\" call to update student (based on \"id\" and \"student\" object's data) from database\n    let updatedCampus = await axios.put(`/api/campuses/${campus.id}`, campus); // Update successful so change state with dispatch\n\n    dispatch(ac.editCampus(updatedCampus));\n  } catch (err) {\n    console.error(err);\n  }\n}; // Single Campus\n// THUNK CREATOR:\n\nexport const fetchCampusThunk = id => async dispatch => {\n  // The THUNK\n  try {\n    // API \"get\" call to get a student data (based on \"id\")from database\n    let res = await axios.get(`/api/campuses/${id}`);\n    dispatch(ac.fetchCampus(res.data));\n  } catch (err) {\n    console.error(err);\n  }\n}; // All Students\n// THUNK CREATOR:\n\nexport const fetchAllStudentsThunk = () => async dispatch => {\n  // The THUNK\n  try {\n    // API \"get\" call to get \"students\" data from database\n    let res = await axios.get(`/api/students`); // Call Action Creator to return Action object (type + payload with \"students\" data)\n    // Then dispatch the Action object to Reducer to update state \n\n    dispatch(ac.fetchAllStudents(res.data));\n  } catch (err) {\n    console.error(err);\n  }\n}; // Add Student\n// THUNK CREATOR:\n\nexport const addStudentThunk = student => async dispatch => {\n  // The THUNK\n  try {\n    // API \"post\" call to add \"student\" object's data to database\n    let res = await axios.post(`/api/students`, student); // Call Action Creator to return Action object (type + payload with new students data)\n    // Then dispatch the Action object to Reducer to update state \n\n    dispatch(ac.addStudent(res.data));\n    return res.data;\n  } catch (err) {\n    console.error(err);\n  }\n}; // Delete Student\n// THUNK CREATOR:\n\nexport const deleteStudentThunk = studentId => async dispatch => {\n  // The THUNK\n  try {\n    // API \"delete\" call to delete student (based on \"studentID\") from database\n    await axios.delete(`/api/students/${studentId}`); // Delete successful so change state with dispatch\n\n    dispatch(ac.deleteStudent(studentId));\n  } catch (err) {\n    console.error(err);\n  }\n}; // Edit Student\n// THUNK CREATOR:\n\nexport const editStudentThunk = student => async dispatch => {\n  // The THUNK\n  try {\n    // API \"put\" call to update student (based on \"id\" and \"student\" object's data) from database\n    let updatedStudent = await axios.put(`/api/students/${student.id}`, student); // Update successful so change state with dispatch\n\n    dispatch(ac.editStudent(updatedStudent));\n  } catch (err) {\n    console.error(err);\n  }\n}; // Single Student\n// THUNK CREATOR:\n\nexport const fetchStudentThunk = id => async dispatch => {\n  // The THUNK\n  try {\n    // API \"get\" call to get a specific student (based on \"id\") data from database\n    let res = await axios.get(`/api/students/${id}`); // Call Action Creator to return Action object (type + payload with student data)\n    // Then dispatch the Action object to Reducer to display student data \n\n    dispatch(ac.fetchStudent(res.data));\n  } catch (err) {\n    console.error(err);\n  }\n};","map":{"version":3,"names":["ac","axios","require","fetchAllCampusesThunk","dispatch","res","get","fetchAllCampuses","data","console","log","err","error","addCampusThunk","campus","post","addCampus","deleteCampusThunk","campusID","delete","deleteCampus","editCampusThunk","updatedCampus","put","id","editCampus","fetchCampusThunk","fetchCampus","fetchAllStudentsThunk","fetchAllStudents","addStudentThunk","student","addStudent","deleteStudentThunk","studentId","deleteStudent","editStudentThunk","updatedStudent","editStudent","fetchStudentThunk","fetchStudent"],"sources":["C:/Users/Joey/Full-Stack-CRUD-Application-Client/src/store/thunks.js"],"sourcesContent":["/*==================================================\r\n/src/store/thunks.js\r\n\r\nIt contains all Thunk Creators and Thunks.\r\n================================================== */\r\nimport * as ac from './actions/actionCreators';  // Import Action Creators (\"ac\" keyword Action Creator)\r\nconst axios = require('axios');\r\n\r\n//All Campuses\r\n// THUNK CREATOR:\r\nexport const fetchAllCampusesThunk = () => async (dispatch) => {  // The THUNK\r\n  try {\r\n    // API \"get\" call to get \"campuses\" data from database\r\n    let res = await axios.get(`/api/campuses`);  \r\n    // Call Action Creator to return Action object (type + payload with \"campuses\" data)\r\n    // Then dispatch the Action object to Reducer to update state \r\n    dispatch(ac.fetchAllCampuses(res.data));\r\n    console.log(res.data, \" Hello\");\r\n  } catch(err) {\r\n    console.error(err);\r\n  }\r\n};\r\n// Add Campus\r\n// THUNK CREATOR:\r\nexport const addCampusThunk = (campus) => async (dispatch) => {  // The THUNK\r\n  try {\r\n    // API \"post\" call to add \"student\" object's data to database\r\n    let res = await axios.post(`/api/campuses`, campus);  \r\n    // Call Action Creator to return Action object (type + payload with new students data)\r\n    // Then dispatch the Action object to Reducer to update state \r\n    dispatch(ac.addCampus(res.data));\r\n    return res.data;\r\n  } catch(err) {\r\n    console.error(err);\r\n  }\r\n};\r\n\r\n// Delete campus\r\n// THUNK CREATOR:\r\nexport const deleteCampusThunk = campusID => async dispatch => {  // The THUNK\r\n  try {\r\n    // API \"delete\" call to delete student (based on \"studentID\") from database\r\n    await axios.delete(`/api/campuses/${campusID}`);  \r\n    // Delete successful so change state with dispatch\r\n    dispatch(ac.deleteCampus(campusID));\r\n  } catch(err) {\r\n    console.error(err);\r\n  }\r\n};\r\n\r\n// Edit Campus\r\n// THUNK CREATOR:\r\nexport const editCampusThunk = campus => async dispatch => {  // The THUNK\r\n  try {\r\n    // API \"put\" call to update student (based on \"id\" and \"student\" object's data) from database\r\n    let updatedCampus = await axios.put(`/api/campuses/${campus.id}`, campus); \r\n    // Update successful so change state with dispatch\r\n    dispatch(ac.editCampus(updatedCampus));\r\n  } catch(err) {\r\n    console.error(err);\r\n  }\r\n};\r\n\r\n// Single Campus\r\n// THUNK CREATOR:\r\nexport const fetchCampusThunk = (id) => async (dispatch) => {  // The THUNK\r\n  try {\r\n    // API \"get\" call to get a student data (based on \"id\")from database\r\n    let res = await axios.get(`/api/campuses/${id}`);  \r\n    dispatch(ac.fetchCampus(res.data));\r\n  } catch(err) {\r\n    console.error(err);\r\n  }\r\n};\r\n\r\n// All Students\r\n// THUNK CREATOR:\r\nexport const fetchAllStudentsThunk = () => async (dispatch) => {  // The THUNK\r\n  try {\r\n    // API \"get\" call to get \"students\" data from database\r\n    let res = await axios.get(`/api/students`);  \r\n    // Call Action Creator to return Action object (type + payload with \"students\" data)\r\n    // Then dispatch the Action object to Reducer to update state \r\n    dispatch(ac.fetchAllStudents(res.data));  \r\n  } catch(err) {\r\n    console.error(err);\r\n  }\r\n};\r\n\r\n// Add Student\r\n// THUNK CREATOR:\r\nexport const addStudentThunk = (student) => async (dispatch) => {  // The THUNK\r\n  try {\r\n    // API \"post\" call to add \"student\" object's data to database\r\n    let res = await axios.post(`/api/students`, student);  \r\n    // Call Action Creator to return Action object (type + payload with new students data)\r\n    // Then dispatch the Action object to Reducer to update state \r\n    dispatch(ac.addStudent(res.data));\r\n    return res.data;\r\n  } catch(err) {\r\n    console.error(err);\r\n  }\r\n};\r\n\r\n// Delete Student\r\n// THUNK CREATOR:\r\nexport const deleteStudentThunk = studentId => async dispatch => {  // The THUNK\r\n  try {\r\n    // API \"delete\" call to delete student (based on \"studentID\") from database\r\n    await axios.delete(`/api/students/${studentId}`);  \r\n    // Delete successful so change state with dispatch\r\n    dispatch(ac.deleteStudent(studentId));\r\n  } catch(err) {\r\n    console.error(err);\r\n  }\r\n};\r\n\r\n// Edit Student\r\n// THUNK CREATOR:\r\nexport const editStudentThunk = student => async dispatch => {  // The THUNK\r\n  try {\r\n    // API \"put\" call to update student (based on \"id\" and \"student\" object's data) from database\r\n    let updatedStudent = await axios.put(`/api/students/${student.id}`, student); \r\n    // Update successful so change state with dispatch\r\n    dispatch(ac.editStudent(updatedStudent));\r\n  } catch(err) {\r\n    console.error(err);\r\n  }\r\n};\r\n\r\n// Single Student\r\n// THUNK CREATOR:\r\nexport const fetchStudentThunk = id => async dispatch => {  // The THUNK\r\n  try {\r\n    // API \"get\" call to get a specific student (based on \"id\") data from database\r\n    let res = await axios.get(`/api/students/${id}`);  \r\n    // Call Action Creator to return Action object (type + payload with student data)\r\n    // Then dispatch the Action object to Reducer to display student data \r\n    dispatch(ac.fetchStudent(res.data));\r\n  } catch(err) {\r\n    console.error(err);\r\n  }\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}