{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Joey\\\\Full-Stack-CRUD-Application-Client\\\\src\\\\components\\\\containers\\\\CampusContainer.js\";\n\n/*==================================================\r\nCampusContainer.js\r\n\r\nThe Container component is responsible for stateful logic and data fetching, and\r\npasses data (if any) as props to the corresponding View component.\r\nIf needed, it also defines the component's \"connect\" function.\r\n================================================== */\nimport Header from './Header';\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { fetchCampusThunk, deleteCampusThunk, editCampusThunk } from \"../../store/thunks\";\nimport { CampusView } from \"../views\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass CampusContainer extends Component {\n  // Get the specific campus data from back-end database\n  componentDidMount() {\n    // Get campus ID from URL (API link)\n    this.props.fetchCampus(this.props.match.params.id);\n  } // Render a Campus view by passing campus data as props to the corresponding View component\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CampusView, {\n        campus: this.props.campus,\n        deleteCampus: this.props.deleteCampus,\n        editCampus: this.props.editCampus\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this);\n  }\n\n} // The following 2 input arguments are passed to the \"connect\" function used by \"CampusContainer\" component to connect to Redux Store.\n// 1. The \"mapState\" argument specifies the data from Redux Store that the component needs.\n// The \"mapState\" is called when the Store State changes, and it returns a data object of \"campus\".\n\n\nconst mapState = state => {\n  return {\n    campus: state.campus // Get the State object from Reducer \"campus\"\n\n  };\n}; // 2. The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\n\n\nconst mapDispatch = dispatch => {\n  return {\n    fetchCampus: id => dispatch(fetchCampusThunk(id)),\n    deleteCampusThunk: campusID => dispatch(deleteCampusThunk(campusID)),\n    editCampusThunk: campusID => dispatch(editCampusThunk(campusID))\n  };\n}; // Type check props;\n\n\nCampusContainer.propTypes = {\n  campus: PropTypes.array.isRequired\n}; // Export store-connected container by default\n// CampusContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \n// (and re-read the values when the Store State updates).\n\nexport default connect(mapState, mapDispatch)(CampusContainer);","map":{"version":3,"names":["Header","React","Component","connect","fetchCampusThunk","deleteCampusThunk","editCampusThunk","CampusView","CampusContainer","componentDidMount","props","fetchCampus","match","params","id","render","campus","deleteCampus","editCampus","mapState","state","mapDispatch","dispatch","campusID","propTypes","PropTypes","array","isRequired"],"sources":["C:/Users/Joey/Full-Stack-CRUD-Application-Client/src/components/containers/CampusContainer.js"],"sourcesContent":["/*==================================================\r\nCampusContainer.js\r\n\r\nThe Container component is responsible for stateful logic and data fetching, and\r\npasses data (if any) as props to the corresponding View component.\r\nIf needed, it also defines the component's \"connect\" function.\r\n================================================== */\r\nimport Header from './Header';\r\nimport React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { fetchCampusThunk, deleteCampusThunk, editCampusThunk } from \"../../store/thunks\";\r\n\r\nimport { CampusView } from \"../views\";\r\n\r\nclass CampusContainer extends Component {\r\n  // Get the specific campus data from back-end database\r\n  componentDidMount() {\r\n    // Get campus ID from URL (API link)\r\n    this.props.fetchCampus(this.props.match.params.id);\r\n  }\r\n\r\n  // Render a Campus view by passing campus data as props to the corresponding View component\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Header />\r\n        <CampusView campus={this.props.campus} \r\n                    deleteCampus={this.props.deleteCampus}\r\n                    editCampus={this.props.editCampus}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// The following 2 input arguments are passed to the \"connect\" function used by \"CampusContainer\" component to connect to Redux Store.\r\n// 1. The \"mapState\" argument specifies the data from Redux Store that the component needs.\r\n// The \"mapState\" is called when the Store State changes, and it returns a data object of \"campus\".\r\nconst mapState = (state) => {\r\n  return {\r\n    campus: state.campus,  // Get the State object from Reducer \"campus\"\r\n  };\r\n};\r\n// 2. The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\r\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\r\nconst mapDispatch = (dispatch) => {\r\n  return {\r\n    fetchCampus: (id) => dispatch(fetchCampusThunk(id)),\r\n    deleteCampusThunk: (campusID) =>dispatch(deleteCampusThunk(campusID)),\r\n    editCampusThunk:(campusID) => dispatch(editCampusThunk(campusID))\r\n  };\r\n};\r\n// Type check props;\r\nCampusContainer.propTypes = {\r\n  campus: PropTypes.array.isRequired,\r\n};\r\n// Export store-connected container by default\r\n// CampusContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \r\n// (and re-read the values when the Store State updates).\r\nexport default connect(mapState, mapDispatch)(CampusContainer);"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,MAAP,MAAmB,UAAnB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,gBAAT,EAA2BC,iBAA3B,EAA8CC,eAA9C,QAAqE,oBAArE;AAEA,SAASC,UAAT,QAA2B,UAA3B;;;AAEA,MAAMC,eAAN,SAA8BN,SAA9B,CAAwC;EACtC;EACAO,iBAAiB,GAAG;IAClB;IACA,KAAKC,KAAL,CAAWC,WAAX,CAAuB,KAAKD,KAAL,CAAWE,KAAX,CAAiBC,MAAjB,CAAwBC,EAA/C;EACD,CALqC,CAOtC;;;EACAC,MAAM,GAAG;IACP,oBACE;MAAA,wBACE,QAAC,MAAD;QAAA;QAAA;QAAA;MAAA,QADF,eAEE,QAAC,UAAD;QAAY,MAAM,EAAE,KAAKL,KAAL,CAAWM,MAA/B;QACY,YAAY,EAAE,KAAKN,KAAL,CAAWO,YADrC;QAEY,UAAU,EAAE,KAAKP,KAAL,CAAWQ;MAFnC;QAAA;QAAA;QAAA;MAAA,QAFF;IAAA;MAAA;MAAA;MAAA;IAAA,QADF;EASD;;AAlBqC,C,CAqBxC;AACA;AACA;;;AACA,MAAMC,QAAQ,GAAIC,KAAD,IAAW;EAC1B,OAAO;IACLJ,MAAM,EAAEI,KAAK,CAACJ,MADT,CACkB;;EADlB,CAAP;AAGD,CAJD,C,CAKA;AACA;;;AACA,MAAMK,WAAW,GAAIC,QAAD,IAAc;EAChC,OAAO;IACLX,WAAW,EAAGG,EAAD,IAAQQ,QAAQ,CAAClB,gBAAgB,CAACU,EAAD,CAAjB,CADxB;IAELT,iBAAiB,EAAGkB,QAAD,IAAaD,QAAQ,CAACjB,iBAAiB,CAACkB,QAAD,CAAlB,CAFnC;IAGLjB,eAAe,EAAEiB,QAAD,IAAcD,QAAQ,CAAChB,eAAe,CAACiB,QAAD,CAAhB;EAHjC,CAAP;AAKD,CAND,C,CAOA;;;AACAf,eAAe,CAACgB,SAAhB,GAA4B;EAC1BR,MAAM,EAAES,SAAS,CAACC,KAAV,CAAgBC;AADE,CAA5B,C,CAGA;AACA;AACA;;AACA,eAAexB,OAAO,CAACgB,QAAD,EAAWE,WAAX,CAAP,CAA+Bb,eAA/B,CAAf"},"metadata":{},"sourceType":"module"}