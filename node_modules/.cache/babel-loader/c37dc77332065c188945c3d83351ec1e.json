{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Joey\\\\Full-Stack-CRUD-Application-Client\\\\src\\\\components\\\\containers\\\\EditStudentContainer.js\";\n\n/*==================================================\r\nEditStudentContainer.js\r\n\r\nThe Container component is responsible for stateful logic and data fetching, and\r\npasses data (if any) as props to the corresponding View component.\r\nIf needed, it also defines the component's \"connect\" function.\r\n================================================== */\nimport Header from './Header';\nimport { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport student from \"../../store/reducers/campus\";\nimport { editStudentThunk } from '../../store/thunks';\nimport EditStudentView from '../views/EditCampusView';\nimport { fetchStudentThunk } from \"../../store/thunks\"; // import {editCampus} from '../store/actions/actionCreators.js';\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass EditStudentContainer extends Component {\n  // Get the specific campus data from back-end database\n  componentDidMount() {\n    // Get campus ID from URL (API link)\n    this.props.fetchStudent(this.props.match.params.id);\n  } //Get Data from database\n\n\n  constructor(props) {\n    super(props);\n\n    this.handleChange = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n\n    this.handleSubmit = async event => {\n      event.preventDefault(); // Prevent browser reload/refresh after submit.\n\n      const updateinfo = {};\n      let edited = this.props.editCampus();\n\n      if (edited) {\n        this.setState({});\n      }\n    };\n\n    this.state = {};\n    this.id = props.match.params.id;\n  } // Capture input data when it is entered\n\n\n  //       // Unmount when the component is being removed from the DOM:\n  componentWillUnmount() {\n    this.setState({\n      redirect: false,\n      redirectId: null\n    });\n  }\n\n  render() {\n    // Redirect to all campuses's page after submit\n    if (this.state.redirect) {\n      return /*#__PURE__*/_jsxDEV(Redirect, {\n        to: `/student/${this.state.redirectId}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 15\n      }, this);\n    } // Display the input form via the corresponding View component\n\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(EditStudentView, {\n        campus: this.props.campus,\n        handleChange: this.handleChange,\n        handleSubmit: this.handleSubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this);\n  }\n\n} // The following 2 input arguments are passed to the \"connect\" function used by \"CampusContainer\" component to connect to Redux Store.\n// 1. The \"mapState\" argument specifies the data from Redux Store that the component needs.\n// The \"mapState\" is called when the Store State changes, and it returns a data object of \"campus\".\n\n\nconst mapState = state => {\n  return {\n    campus: state.campus\n  };\n}; // The following input argument is passed to the \"connect\" function used by \"NewStudentContainer\" component to connect to Redux Store.\n// The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\n\n\nconst mapDispatch = dispatch => {\n  return {};\n};\n\nexport default connect(mapState, mapDispatch)(EditStudentContainer);","map":{"version":3,"names":["Header","Component","connect","Redirect","student","editStudentThunk","EditStudentView","fetchStudentThunk","EditStudentContainer","componentDidMount","props","fetchStudent","match","params","id","constructor","handleChange","event","setState","target","name","value","handleSubmit","preventDefault","updateinfo","edited","editCampus","state","componentWillUnmount","redirect","redirectId","render","campus","mapState","mapDispatch","dispatch"],"sources":["C:/Users/Joey/Full-Stack-CRUD-Application-Client/src/components/containers/EditStudentContainer.js"],"sourcesContent":["/*==================================================\r\nEditStudentContainer.js\r\n\r\nThe Container component is responsible for stateful logic and data fetching, and\r\npasses data (if any) as props to the corresponding View component.\r\nIf needed, it also defines the component's \"connect\" function.\r\n================================================== */\r\nimport Header from './Header';\r\nimport { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\nimport student from \"../../store/reducers/campus\";\r\nimport { editStudentThunk } from '../../store/thunks';\r\nimport EditStudentView from '../views/EditCampusView';\r\nimport { fetchStudentThunk } from \"../../store/thunks\";\r\n\r\n// import {editCampus} from '../store/actions/actionCreators.js';\r\n\r\nclass EditStudentContainer extends Component {\r\n   // Get the specific campus data from back-end database\r\n   componentDidMount() {\r\n    // Get campus ID from URL (API link)\r\n    this.props.fetchStudent(this.props.match.params.id);\r\n  }\r\n    //Get Data from database\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            \r\n        };\r\n        this.id = props.match.params.id\r\n\r\n    }\r\n      // Capture input data when it is entered\r\n  handleChange = event => {\r\n    this.setState({\r\n      [event.target.name]: event.target.value\r\n    });\r\n  }\r\n\r\n    // Take action after user click the submit button\r\n    handleSubmit = async event => {\r\n        event.preventDefault();  // Prevent browser reload/refresh after submit.\r\n    \r\n     \r\n        const updateinfo = {\r\n              \r\n          };\r\n          let edited = this.props.editCampus( );\r\n          if(edited)\r\n          {this.setState({\r\n        \r\n          });\r\n        }\r\n      };\r\n//       // Unmount when the component is being removed from the DOM:\r\n  componentWillUnmount() { \r\n    this.setState({redirect: false, redirectId: null});\r\n}   \r\n    render() {\r\n    // Redirect to all campuses's page after submit\r\n    if(this.state.redirect) {\r\n      return (<Redirect to={`/student/${this.state.redirectId}`}/>)\r\n    }\r\n\r\n    // Display the input form via the corresponding View component\r\n    return (\r\n      <div>\r\n        <Header />\r\n        <EditStudentView \r\n          campus={this.props.campus} \r\n          handleChange = {this.handleChange} \r\n          handleSubmit={this.handleSubmit}      \r\n        />\r\n      </div>          \r\n    );\r\n  }\r\n}\r\n// The following 2 input arguments are passed to the \"connect\" function used by \"CampusContainer\" component to connect to Redux Store.\r\n// 1. The \"mapState\" argument specifies the data from Redux Store that the component needs.\r\n// The \"mapState\" is called when the Store State changes, and it returns a data object of \"campus\".\r\nconst mapState = (state) => {\r\n  return {\r\n    campus: state.campus};\r\n};\r\n// The following input argument is passed to the \"connect\" function used by \"NewStudentContainer\" component to connect to Redux Store.\r\n// The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\r\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\r\nconst mapDispatch = (dispatch) => {\r\n    return({\r\n      \r\n    })\r\n}\r\nexport default connect(mapState, mapDispatch)(EditStudentContainer);"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,MAAP,MAAmB,UAAnB;AACA,SAASC,SAAT,QAA0B,OAA1B;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,QAAT,QAAyB,kBAAzB;AACA,OAAOC,OAAP,MAAoB,6BAApB;AACA,SAASC,gBAAT,QAAiC,oBAAjC;AACA,OAAOC,eAAP,MAA4B,yBAA5B;AACA,SAASC,iBAAT,QAAkC,oBAAlC,C,CAEA;;;;AAEA,MAAMC,oBAAN,SAAmCP,SAAnC,CAA6C;EAC1C;EACAQ,iBAAiB,GAAG;IACnB;IACA,KAAKC,KAAL,CAAWC,YAAX,CAAwB,KAAKD,KAAL,CAAWE,KAAX,CAAiBC,MAAjB,CAAwBC,EAAhD;EACD,CAL0C,CAMzC;;;EACAC,WAAW,CAACL,KAAD,EAAO;IACd,MAAMA,KAAN;;IADc,KASpBM,YAToB,GASLC,KAAK,IAAI;MACtB,KAAKC,QAAL,CAAc;QACZ,CAACD,KAAK,CAACE,MAAN,CAAaC,IAAd,GAAqBH,KAAK,CAACE,MAAN,CAAaE;MADtB,CAAd;IAGD,CAbmB;;IAAA,KAgBlBC,YAhBkB,GAgBH,MAAML,KAAN,IAAe;MAC1BA,KAAK,CAACM,cAAN,GAD0B,CACD;;MAGzB,MAAMC,UAAU,GAAG,EAAnB;MAGE,IAAIC,MAAM,GAAG,KAAKf,KAAL,CAAWgB,UAAX,EAAb;;MACA,IAAGD,MAAH,EACA;QAAC,KAAKP,QAAL,CAAc,EAAd;MAGF;IACF,CA7Be;;IAEd,KAAKS,KAAL,GAAa,EAAb;IAGA,KAAKb,EAAL,GAAUJ,KAAK,CAACE,KAAN,CAAYC,MAAZ,CAAmBC,EAA7B;EAEH,CAdwC,CAevC;;;EAsBN;EACEc,oBAAoB,GAAG;IACrB,KAAKV,QAAL,CAAc;MAACW,QAAQ,EAAE,KAAX;MAAkBC,UAAU,EAAE;IAA9B,CAAd;EACH;;EACGC,MAAM,GAAG;IACT;IACA,IAAG,KAAKJ,KAAL,CAAWE,QAAd,EAAwB;MACtB,oBAAQ,QAAC,QAAD;QAAU,EAAE,EAAG,YAAW,KAAKF,KAAL,CAAWG,UAAW;MAAhD;QAAA;QAAA;QAAA;MAAA,QAAR;IACD,CAJQ,CAMT;;;IACA,oBACE;MAAA,wBACE,QAAC,MAAD;QAAA;QAAA;QAAA;MAAA,QADF,eAEE,QAAC,eAAD;QACE,MAAM,EAAE,KAAKpB,KAAL,CAAWsB,MADrB;QAEE,YAAY,EAAI,KAAKhB,YAFvB;QAGE,YAAY,EAAE,KAAKM;MAHrB;QAAA;QAAA;QAAA;MAAA,QAFF;IAAA;MAAA;MAAA;MAAA;IAAA,QADF;EAUD;;AA1D0C,C,CA4D7C;AACA;AACA;;;AACA,MAAMW,QAAQ,GAAIN,KAAD,IAAW;EAC1B,OAAO;IACLK,MAAM,EAAEL,KAAK,CAACK;EADT,CAAP;AAED,CAHD,C,CAIA;AACA;AACA;;;AACA,MAAME,WAAW,GAAIC,QAAD,IAAc;EAC9B,OAAO,EAAP;AAGH,CAJD;;AAKA,eAAejC,OAAO,CAAC+B,QAAD,EAAWC,WAAX,CAAP,CAA+B1B,oBAA/B,CAAf"},"metadata":{},"sourceType":"module"}