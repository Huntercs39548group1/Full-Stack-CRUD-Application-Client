{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\junior\\\\Full-Stack-CRUD-Application-Client\\\\src\\\\components\\\\containers\\\\AllCampusesContainer.js\";\n\n/*==================================================\r\n/src/components/containers\\AllCampusesContainer.js\r\n\r\nThe Container component is responsible for stateful logic and data fetching, and\r\npasses data (if any) as props to the corresponding View component.\r\nIf needed, it also defines the component's \"connect\" function.\r\n================================================== */\nimport Header from './Header';\nimport { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { withRouter } from \"react-router-dom\";\nimport { fetchAllCampusesThunk, deleteCampusThunk, editCampusThunk } from \"../../store/thunks\";\nimport AllCampusesView from \"../views/AllCampusesView\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass AllCampusesContainer extends Component {\n  // Get all campuses data from back-end database\n  componentDidMount() {\n    console.log(this.props);\n    this.props.fetchAllCampuses();\n  } // Render All Campuses view by passing all campuses data as props to the corresponding View component\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(AllCampusesView, {\n        allCampuses: this.props.allCampuses,\n        deleteCampus: this.props.deleteCampus,\n        editCampus: this.props.editCampus\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this);\n  }\n\n} // 1. The \"mapState\" argument specifies the data from Redux Store that the component needs.\n// The \"mapState\" is called when the Store State changes, and it returns a data object of \"allCampuses\".\n// The following 2 input arguments are passed to the \"connect\" function used by \"AllCampusesContainer\" component to connect to Redux Store.\n\n\nconst mapState = state => {\n  return {\n    allCampuses: state.allCampuses // Get the State object from Reducer \"allCampuses\"\n\n  };\n}; // 2. The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\n\n\nconst mapDispatch = dispatch => {\n  return {\n    fetchAllCampuses: () => dispatch(fetchAllCampusesThunk()),\n    deleteCampus: campusID => dispatch(deleteCampusThunk(campusID)),\n    editcampus: campusID => dispatch(editCampusThunk(campusID))\n  };\n}; // Type check props;\n\n\nAllCampusesContainer.propTypes = {\n  allCampuses: PropTypes.array.isRequired,\n  fetchAllCampuses: PropTypes.func.isRequired\n}; // Export store-connected container by default\n// AllCampusesContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \n// (and re-read the values when the Store State updates).\n// export default withRouter(connect(mapState, mapDispatch)(AllCampusContainer));\n\nexport default withRouter(connect(mapState, mapDispatch)(AllCampusesContainer));","map":{"version":3,"names":["Header","Component","PropTypes","connect","withRouter","fetchAllCampusesThunk","deleteCampusThunk","editCampusThunk","AllCampusesView","AllCampusesContainer","componentDidMount","console","log","props","fetchAllCampuses","render","allCampuses","deleteCampus","editCampus","mapState","state","mapDispatch","dispatch","campusID","editcampus","propTypes","array","isRequired","func"],"sources":["C:/Users/junior/Full-Stack-CRUD-Application-Client/src/components/containers/AllCampusesContainer.js"],"sourcesContent":["/*==================================================\r\n/src/components/containers\\AllCampusesContainer.js\r\n\r\nThe Container component is responsible for stateful logic and data fetching, and\r\npasses data (if any) as props to the corresponding View component.\r\nIf needed, it also defines the component's \"connect\" function.\r\n================================================== */\r\nimport Header from './Header';\r\nimport { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport { withRouter } from \"react-router-dom\";\r\n\r\nimport { fetchAllCampusesThunk, deleteCampusThunk, editCampusThunk } from \"../../store/thunks\";\r\nimport  AllCampusesView  from \"../views/AllCampusesView\";\r\n\r\nclass AllCampusesContainer extends Component {\r\n  // Get all campuses data from back-end database\r\n  componentDidMount() {\r\n    console.log(this.props);\r\n    this.props.fetchAllCampuses();\r\n  }\r\n\r\n  // Render All Campuses view by passing all campuses data as props to the corresponding View component\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Header />\r\n        <AllCampusesView\r\n          allCampuses={this.props.allCampuses}\r\n          deleteCampus = {this.props.deleteCampus}\r\n          editCampus ={this.props.editCampus}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// 1. The \"mapState\" argument specifies the data from Redux Store that the component needs.\r\n// The \"mapState\" is called when the Store State changes, and it returns a data object of \"allCampuses\".\r\n// The following 2 input arguments are passed to the \"connect\" function used by \"AllCampusesContainer\" component to connect to Redux Store.\r\nconst mapState = (state) => {\r\n  return {\r\n    allCampuses: state.allCampuses,  // Get the State object from Reducer \"allCampuses\"\r\n  };\r\n};  \r\n// 2. The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\r\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\r\nconst mapDispatch = (dispatch) => {\r\n  return {\r\n    fetchAllCampuses: () => dispatch(fetchAllCampusesThunk()),\r\n    deleteCampus: (campusID) => dispatch(deleteCampusThunk(campusID)),\r\n    editcampus: (campusID) => dispatch(editCampusThunk(campusID)),\r\n  };\r\n};\r\n\r\n// Type check props;\r\nAllCampusesContainer.propTypes = {\r\n  allCampuses: PropTypes.array.isRequired,\r\n  fetchAllCampuses: PropTypes.func.isRequired,\r\n};\r\n\r\n// Export store-connected container by default\r\n// AllCampusesContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \r\n// (and re-read the values when the Store State updates).\r\n// export default withRouter(connect(mapState, mapDispatch)(AllCampusContainer));\r\nexport default withRouter(connect(mapState, mapDispatch)(AllCampusesContainer));"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,MAAP,MAAmB,UAAnB;AACA,SAASC,SAAT,QAA0B,OAA1B;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,UAAT,QAA2B,kBAA3B;AAEA,SAASC,qBAAT,EAAgCC,iBAAhC,EAAmDC,eAAnD,QAA0E,oBAA1E;AACA,OAAQC,eAAR,MAA8B,0BAA9B;;;AAEA,MAAMC,oBAAN,SAAmCR,SAAnC,CAA6C;EAC3C;EACAS,iBAAiB,GAAG;IAClBC,OAAO,CAACC,GAAR,CAAY,KAAKC,KAAjB;IACA,KAAKA,KAAL,CAAWC,gBAAX;EACD,CAL0C,CAO3C;;;EACAC,MAAM,GAAG;IACP,oBACE;MAAA,wBACE,QAAC,MAAD;QAAA;QAAA;QAAA;MAAA,QADF,eAEE,QAAC,eAAD;QACE,WAAW,EAAE,KAAKF,KAAL,CAAWG,WAD1B;QAEE,YAAY,EAAI,KAAKH,KAAL,CAAWI,YAF7B;QAGE,UAAU,EAAG,KAAKJ,KAAL,CAAWK;MAH1B;QAAA;QAAA;QAAA;MAAA,QAFF;IAAA;MAAA;MAAA;MAAA;IAAA,QADF;EAUD;;AAnB0C,C,CAsB7C;AACA;AACA;;;AACA,MAAMC,QAAQ,GAAIC,KAAD,IAAW;EAC1B,OAAO;IACLJ,WAAW,EAAEI,KAAK,CAACJ,WADd,CAC4B;;EAD5B,CAAP;AAGD,CAJD,C,CAKA;AACA;;;AACA,MAAMK,WAAW,GAAIC,QAAD,IAAc;EAChC,OAAO;IACLR,gBAAgB,EAAE,MAAMQ,QAAQ,CAACjB,qBAAqB,EAAtB,CAD3B;IAELY,YAAY,EAAGM,QAAD,IAAcD,QAAQ,CAAChB,iBAAiB,CAACiB,QAAD,CAAlB,CAF/B;IAGLC,UAAU,EAAGD,QAAD,IAAcD,QAAQ,CAACf,eAAe,CAACgB,QAAD,CAAhB;EAH7B,CAAP;AAKD,CAND,C,CAQA;;;AACAd,oBAAoB,CAACgB,SAArB,GAAiC;EAC/BT,WAAW,EAAEd,SAAS,CAACwB,KAAV,CAAgBC,UADE;EAE/Bb,gBAAgB,EAAEZ,SAAS,CAAC0B,IAAV,CAAeD;AAFF,CAAjC,C,CAKA;AACA;AACA;AACA;;AACA,eAAevB,UAAU,CAACD,OAAO,CAACgB,QAAD,EAAWE,WAAX,CAAP,CAA+BZ,oBAA/B,CAAD,CAAzB"},"metadata":{},"sourceType":"module"}