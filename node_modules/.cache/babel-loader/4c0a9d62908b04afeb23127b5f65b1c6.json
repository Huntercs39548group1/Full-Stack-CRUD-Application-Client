{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Joey\\\\Full-Stack-CRUD-Application-Client\\\\src\\\\components\\\\containers\\\\EditStudentContainer.js\";\n\n/*==================================================\r\nEditStudentContainer.js\r\n\r\nThe Container component is responsible for stateful logic and data fetching, and\r\npasses data (if any) as props to the corresponding View component.\r\nIf needed, it also defines the component's \"connect\" function.\r\n================================================== */\nimport Header from './Header';\nimport { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport { editStudentThunk } from '../../store/thunks';\nimport { EditStudentView } from '../views';\nimport { fetchStudentThunk } from \"../../store/thunks\"; // import {editStudent} from '../store/actions/actionCreators.js';\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass EditStudentContainer extends Component {\n  // Get the specific Student data from back-end database\n  //Get Data from database\n  constructor(props) {\n    super(props);\n\n    this.handleChange = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n\n    this.handleSubmit = async event => {\n      event.preventDefault(); // Prevent browser reload/refresh after submit.\n\n      let updateinfo = {\n        firstname: this.state.firstname,\n        lastname: this.state.lastname,\n        email: this.state.email,\n        gpa: this.state.gpa,\n        campusId: this.state.campusId,\n        id: window.location.pathname.slice(-1)\n      };\n      await this.props.editStudent(updateinfo);\n      this.setState({\n        firstname: \"\",\n        lastname: \"\",\n        email: \"\",\n        gpa: 0,\n        campusId: null,\n        redirect: true,\n        redirectId: window.location.pathname.slice(-1)\n      });\n    };\n\n    this.state = {\n      firstname: \"\",\n      lastname: \"\",\n      email: \"\",\n      gpa: 0.0,\n      campusId: null,\n      redirect: false,\n      redirectID: null\n    };\n  }\n\n  componentDidMount() {\n    // Get campus ID from URL (API link)\n    this.props.fetchStudent(window.location.pathname.slice(-1));\n    this.setState({\n      firstname: this.props.student.firstname,\n      lastname: this.props.student.lastname,\n      email: this.props.student.email,\n      gpa: this.props.student.gpa,\n      campusId: this.props.student.campusId,\n      redirect: false,\n      redirectId: null\n    });\n  } // Capture input data when it is entered\n\n\n  //       // Unmount when the component is being removed from the DOM:\n  componentWillUnmount() {\n    this.setState({\n      redirect: false,\n      redirectId: null\n    });\n  }\n\n  render() {\n    // Redirect to all Studentes's page after submit\n    if (this.state.redirect) {\n      return /*#__PURE__*/_jsxDEV(Redirect, {\n        to: `/student/${this.state.redirectId}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 15\n      }, this);\n    } // Display the input form via the corresponding View component\n\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(EditStudentView, {\n        fetchStudent: this.props.fetchStudent,\n        editStudent: this.props.editStudent,\n        student: this.props.student,\n        handleChange: this.handleChange,\n        handleSubmit: this.handleSubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this);\n  }\n\n} // The following 2 input arguments are passed to the \"connect\" function used by \"StudentContainer\" component to connect to Redux Store.\n// 1. The \"mapState\" argument specifies the data from Redux Store that the component needs.\n// The \"mapState\" is called when the Store State changes, and it returns a data object of \"Student\".\n\n\nconst mapState = state => {\n  return {\n    student: state.student\n  };\n}; // The following input argument is passed to the \"connect\" function used by \"NewStudentContainer\" component to connect to Redux Store.\n// The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\n\n\nconst mapDispatch = dispatch => {\n  return {\n    fetchStudent: id => dispatch(fetchStudentThunk(id)),\n    editStudent: student => dispatch(editStudentThunk(student))\n  };\n};\n\nexport default connect(mapState, mapDispatch)(EditStudentContainer);","map":{"version":3,"names":["Header","Component","connect","Redirect","editStudentThunk","EditStudentView","fetchStudentThunk","EditStudentContainer","constructor","props","handleChange","event","setState","target","name","value","handleSubmit","preventDefault","updateinfo","firstname","state","lastname","email","gpa","campusId","id","window","location","pathname","slice","editStudent","redirect","redirectId","redirectID","componentDidMount","fetchStudent","student","componentWillUnmount","render","mapState","mapDispatch","dispatch"],"sources":["C:/Users/Joey/Full-Stack-CRUD-Application-Client/src/components/containers/EditStudentContainer.js"],"sourcesContent":["/*==================================================\r\nEditStudentContainer.js\r\n\r\nThe Container component is responsible for stateful logic and data fetching, and\r\npasses data (if any) as props to the corresponding View component.\r\nIf needed, it also defines the component's \"connect\" function.\r\n================================================== */\r\nimport Header from './Header';\r\nimport { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { editStudentThunk } from '../../store/thunks';\r\nimport { EditStudentView } from '../views';\r\nimport { fetchStudentThunk } from \"../../store/thunks\";\r\n\r\n// import {editStudent} from '../store/actions/actionCreators.js';\r\n\r\nclass EditStudentContainer extends Component {\r\n   // Get the specific Student data from back-end database\r\n\r\n    //Get Data from database\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n          firstname: \"\",\r\n          lastname: \"\",\r\n          email: \"\",\r\n          gpa: 0.0,\r\n          campusId: null,\r\n          redirect: false,\r\n          redirectID: null \r\n        };\r\n\r\n    }\r\n    componentDidMount() {\r\n      // Get campus ID from URL (API link)\r\n      this.props.fetchStudent(window.location.pathname.slice(-1));\r\n          this.setState({\r\n            firstname: this.props.student.firstname,\r\n            lastname: this.props.student.lastname,\r\n            email: this.props.student.email,\r\n            gpa: this.props.student.gpa,\r\n            campusId: this.props.student.campusId,\r\n            redirect: false, \r\n            redirectId: null\r\n          })\r\n        }\r\n  \r\n      // Capture input data when it is entered\r\n  handleChange = event => {\r\n    this.setState({\r\n      [event.target.name]: event.target.value\r\n    });\r\n  }\r\n\r\n    // Take action after user click the submit button\r\n    handleSubmit = async event => {\r\n        event.preventDefault();  // Prevent browser reload/refresh after submit.\r\n    \r\n     \r\n        let updateinfo = {\r\n          firstname: this.state.firstname,\r\n          lastname: this.state.lastname,\r\n          email: this.state.email,\r\n          gpa: this.state.gpa,\r\n          campusId: this.state.campusId,\r\n          id: window.location.pathname.slice(-1)\r\n      };\r\n         await this.props.editStudent(updateinfo);\r\n        this.setState({\r\n            firstname: \"\", \r\n            lastname: \"\", \r\n            email: \"\",\r\n            gpa: 0,\r\n            campusId: null, \r\n            redirect: true, \r\n            redirectId: window.location.pathname.slice(-1)\r\n          });\r\n        \r\n      };\r\n//       // Unmount when the component is being removed from the DOM:\r\n  componentWillUnmount() { \r\n    this.setState({redirect: false, redirectId: null});\r\n}   \r\n    render() {\r\n    // Redirect to all Studentes's page after submit\r\n    if(this.state.redirect) {\r\n      return (<Redirect to={`/student/${this.state.redirectId}`}/>)\r\n    }\r\n\r\n    // Display the input form via the corresponding View component\r\n    return (\r\n      <div>\r\n        <Header />\r\n        <EditStudentView \r\n          fetchStudent={this.props.fetchStudent}\r\n          editStudent={this.props.editStudent}\r\n          student={this.props.student} \r\n          handleChange = {this.handleChange} \r\n          handleSubmit={this.handleSubmit}      \r\n        />\r\n      </div>          \r\n    );\r\n  }\r\n}\r\n// The following 2 input arguments are passed to the \"connect\" function used by \"StudentContainer\" component to connect to Redux Store.\r\n// 1. The \"mapState\" argument specifies the data from Redux Store that the component needs.\r\n// The \"mapState\" is called when the Store State changes, and it returns a data object of \"Student\".\r\nconst mapState = (state) => {\r\n  return {\r\n    student: state.student};\r\n};\r\n// The following input argument is passed to the \"connect\" function used by \"NewStudentContainer\" component to connect to Redux Store.\r\n// The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\r\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\r\nconst mapDispatch = (dispatch) => {\r\n    return({\r\n      fetchStudent: (id) => dispatch(fetchStudentThunk(id)),\r\n      editStudent:  (student) => dispatch(editStudentThunk(student)),\r\n    })\r\n}\r\nexport default connect(mapState, mapDispatch)(EditStudentContainer);"],"mappings":"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"},"metadata":{},"sourceType":"module"}