{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Joey\\\\Full-Stack-CRUD-Application-Client\\\\src\\\\components\\\\containers\\\\NewCampusContainer.js\";\n\n/*==================================================\r\nNewStudentContainer.js\r\n\r\nThe Container component is responsible for stateful logic and data fetching, and\r\npasses data (if any) as props to the corresponding View component.\r\nIf needed, it also defines the component's \"connect\" function.\r\n================================================== */\nimport Header from './Header';\nimport { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport { Link } from 'react-router-dom';\nimport NewCampusView from '../views/NewCampusView';\nimport { addCampusThunk } from '../../store/thunks';\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst navigate = useNavigate();\n\nclass NewCampusContainer extends Component {\n  // Initialize state\n  constructor(props) {\n    super(props);\n\n    this.handleChange = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n\n    this.handleSubmit = async event => {\n      event.preventDefault(); // Prevent browser reload/refresh after submit.\n\n      let campus = {\n        name: this.state.name,\n        address: this.state.address,\n        description: this.state.description,\n        campusId: this.state.campusID\n      }; // Add new student in back-end database\n\n      let newCampus = await this.props.addCampus(campus); // Update state, and trigger redirect to show the new student\n\n      if (newCampus) {\n        this.setState({\n          name: \"\",\n          description: \"\",\n          campusID: null,\n          redirect: true,\n          redirectId: newCampus.id\n        });\n      }\n    };\n\n    this.state = {\n      name: \"\",\n      address: \"\",\n      description: \"\",\n      campusID: null,\n      redirect: false,\n      redirectId: null\n    };\n  } // Capture input data when it is entered\n\n\n  // Unmount when the component is being removed from the DOM:\n  componentWillUnmount() {\n    this.setState({\n      redirect: false,\n      redirectId: null\n    });\n  } // Render new student input form\n\n\n  render() {\n    // Redirect to new student's page after submit\n    if (this.state.redirect) {\n      return /*#__PURE__*/_jsxDEV(Redirect, {\n        to: `/campus/${this.state.redirectId}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 15\n      }, this);\n    } // Display the input form via the corresponding View component\n\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(NewCampusView, {\n        handleChange: this.handleChange,\n        handleSubmit: this.handleSubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this);\n  }\n\n} // The following input argument is passed to the \"connect\" function used by \"NewStudentContainer\" component to connect to Redux Store.\n// The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\n\n\nconst mapDispatch = dispatch => {\n  return {\n    addCampus: campus => dispatch(addCampusThunk(campus))\n  };\n}; // Export store-connected container by default\n// NewStudentContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \n// (and re-read the values when the Store State updates).\n\n\nexport default connect(null, mapDispatch)(NewCampusContainer);","map":{"version":3,"names":["Header","Component","connect","Redirect","Link","NewCampusView","addCampusThunk","useNavigate","navigate","NewCampusContainer","constructor","props","handleChange","event","setState","target","name","value","handleSubmit","preventDefault","campus","state","address","description","campusId","campusID","newCampus","addCampus","redirect","redirectId","id","componentWillUnmount","render","mapDispatch","dispatch"],"sources":["C:/Users/Joey/Full-Stack-CRUD-Application-Client/src/components/containers/NewCampusContainer.js"],"sourcesContent":["/*==================================================\r\nNewStudentContainer.js\r\n\r\nThe Container component is responsible for stateful logic and data fetching, and\r\npasses data (if any) as props to the corresponding View component.\r\nIf needed, it also defines the component's \"connect\" function.\r\n================================================== */\r\nimport Header from './Header';\r\nimport { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { Link } from 'react-router-dom';\r\nimport NewCampusView from '../views/NewCampusView';\r\nimport { addCampusThunk } from '../../store/thunks';\r\nimport { useNavigate } from 'react-router-dom';\r\nconst navigate = useNavigate();\r\nclass NewCampusContainer extends Component {\r\n  // Initialize state\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      name: \"\", \r\n      address: \"\", \r\n      description: \"\", \r\n      campusID: null,\r\n      redirect: false, \r\n      redirectId: null\r\n    };\r\n  }\r\n\r\n  // Capture input data when it is entered\r\n  handleChange = event => {\r\n    this.setState({\r\n      [event.target.name]: event.target.value\r\n    });\r\n  }\r\n\r\n  // Take action after user click the submit button\r\n  handleSubmit = async event => {\r\n    event.preventDefault();  // Prevent browser reload/refresh after submit.\r\n\r\n    let campus = {\r\n        name: this.state.name,\r\n        address: this.state.address,\r\n        description: this.state.description,\r\n        campusId: this.state.campusID\r\n    };\r\n    \r\n    // Add new student in back-end database\r\n    let newCampus = await this.props.addCampus(campus);\r\n\r\n    // Update state, and trigger redirect to show the new student\r\n    if (newCampus){\r\n      this.setState({\r\n        name: \"\", \r\n        description: \"\", \r\n        campusID: null, \r\n        redirect: true, \r\n        redirectId: newCampus.id\r\n      });\r\n    }\r\n\r\n  }\r\n\r\n  // Unmount when the component is being removed from the DOM:\r\n  componentWillUnmount() { \r\n      this.setState({redirect: false, redirectId: null});\r\n  }\r\n\r\n  // Render new student input form\r\n  render() {\r\n    // Redirect to new student's page after submit\r\n    if(this.state.redirect) {\r\n      return (<Redirect to={`/campus/${this.state.redirectId}`}/>)\r\n    }\r\n\r\n    // Display the input form via the corresponding View component\r\n    return (\r\n      <div>\r\n        <Header />\r\n        <NewCampusView \r\n          handleChange = {this.handleChange} \r\n          handleSubmit={this.handleSubmit}      \r\n        />\r\n      </div>          \r\n    );\r\n  }\r\n}\r\n\r\n// The following input argument is passed to the \"connect\" function used by \"NewStudentContainer\" component to connect to Redux Store.\r\n// The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\r\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\r\nconst mapDispatch = (dispatch) => {\r\n    return({\r\n        addCampus: (campus) => dispatch(addCampusThunk(campus)),\r\n    })\r\n}\r\n\r\n// Export store-connected container by default\r\n// NewStudentContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \r\n// (and re-read the values when the Store State updates).\r\nexport default connect(null, mapDispatch)(NewCampusContainer);"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,MAAP,MAAmB,UAAnB;AACA,SAASC,SAAT,QAA0B,OAA1B;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,QAAT,QAAyB,kBAAzB;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,OAAOC,aAAP,MAA0B,wBAA1B;AACA,SAASC,cAAT,QAA+B,oBAA/B;AACA,SAASC,WAAT,QAA4B,kBAA5B;;AACA,MAAMC,QAAQ,GAAGD,WAAW,EAA5B;;AACA,MAAME,kBAAN,SAAiCR,SAAjC,CAA2C;EACzC;EACAS,WAAW,CAACC,KAAD,EAAO;IAChB,MAAMA,KAAN;;IADgB,KAalBC,YAbkB,GAaHC,KAAK,IAAI;MACtB,KAAKC,QAAL,CAAc;QACZ,CAACD,KAAK,CAACE,MAAN,CAAaC,IAAd,GAAqBH,KAAK,CAACE,MAAN,CAAaE;MADtB,CAAd;IAGD,CAjBiB;;IAAA,KAoBlBC,YApBkB,GAoBH,MAAML,KAAN,IAAe;MAC5BA,KAAK,CAACM,cAAN,GAD4B,CACH;;MAEzB,IAAIC,MAAM,GAAG;QACTJ,IAAI,EAAE,KAAKK,KAAL,CAAWL,IADR;QAETM,OAAO,EAAE,KAAKD,KAAL,CAAWC,OAFX;QAGTC,WAAW,EAAE,KAAKF,KAAL,CAAWE,WAHf;QAITC,QAAQ,EAAE,KAAKH,KAAL,CAAWI;MAJZ,CAAb,CAH4B,CAU5B;;MACA,IAAIC,SAAS,GAAG,MAAM,KAAKf,KAAL,CAAWgB,SAAX,CAAqBP,MAArB,CAAtB,CAX4B,CAa5B;;MACA,IAAIM,SAAJ,EAAc;QACZ,KAAKZ,QAAL,CAAc;UACZE,IAAI,EAAE,EADM;UAEZO,WAAW,EAAE,EAFD;UAGZE,QAAQ,EAAE,IAHE;UAIZG,QAAQ,EAAE,IAJE;UAKZC,UAAU,EAAEH,SAAS,CAACI;QALV,CAAd;MAOD;IAEF,CA5CiB;;IAEhB,KAAKT,KAAL,GAAa;MACXL,IAAI,EAAE,EADK;MAEXM,OAAO,EAAE,EAFE;MAGXC,WAAW,EAAE,EAHF;MAIXE,QAAQ,EAAE,IAJC;MAKXG,QAAQ,EAAE,KALC;MAMXC,UAAU,EAAE;IAND,CAAb;EAQD,CAZwC,CAczC;;;EAkCA;EACAE,oBAAoB,GAAG;IACnB,KAAKjB,QAAL,CAAc;MAACc,QAAQ,EAAE,KAAX;MAAkBC,UAAU,EAAE;IAA9B,CAAd;EACH,CAnDwC,CAqDzC;;;EACAG,MAAM,GAAG;IACP;IACA,IAAG,KAAKX,KAAL,CAAWO,QAAd,EAAwB;MACtB,oBAAQ,QAAC,QAAD;QAAU,EAAE,EAAG,WAAU,KAAKP,KAAL,CAAWQ,UAAW;MAA/C;QAAA;QAAA;QAAA;MAAA,QAAR;IACD,CAJM,CAMP;;;IACA,oBACE;MAAA,wBACE,QAAC,MAAD;QAAA;QAAA;QAAA;MAAA,QADF,eAEE,QAAC,aAAD;QACE,YAAY,EAAI,KAAKjB,YADvB;QAEE,YAAY,EAAE,KAAKM;MAFrB;QAAA;QAAA;QAAA;MAAA,QAFF;IAAA;MAAA;MAAA;MAAA;IAAA,QADF;EASD;;AAtEwC,C,CAyE3C;AACA;AACA;;;AACA,MAAMe,WAAW,GAAIC,QAAD,IAAc;EAC9B,OAAO;IACHP,SAAS,EAAGP,MAAD,IAAYc,QAAQ,CAAC5B,cAAc,CAACc,MAAD,CAAf;EAD5B,CAAP;AAGH,CAJD,C,CAMA;AACA;AACA;;;AACA,eAAelB,OAAO,CAAC,IAAD,EAAO+B,WAAP,CAAP,CAA2BxB,kBAA3B,CAAf"},"metadata":{},"sourceType":"module"}