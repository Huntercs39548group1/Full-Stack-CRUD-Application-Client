{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Joey\\\\Full-Stack-CRUD-Application-Client\\\\src\\\\components\\\\containers\\\\EditCampusContainer.js\";\n\n/*==================================================\r\nEditCampusContainer.js\r\n\r\nThe Container component is responsible for stateful logic and data fetching, and\r\npasses data (if any) as props to the corresponding View component.\r\nIf needed, it also defines the component's \"connect\" function.\r\n================================================== */\nimport Header from './Header';\nimport { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport campus from \"../../store/reducers/campus\";\nimport { editCampusThunk } from '../../store/thunks';\nimport EditCampusView from '../views/EditCampusView';\nimport { fetchCampusThunk } from \"../../store/thunks\"; // import {editCampus} from '../store/actions/actionCreators.js';\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass EditCampusContainer extends Component {\n  // Get the specific campus data from back-end database\n  componentDidMount() {\n    // Get campus ID from URL (API link)\n    this.props.fetchCampus(this.props.match.params.id);\n  } //Get Data from database\n\n\n  constructor(props) {\n    super(props);\n\n    this.handleChange = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n\n    this.handleSubmit = async event => {\n      event.preventDefault(); // Prevent browser reload/refresh after submit.\n      // let campus = {\n      //     name: this.state.name,\n      //     address: this.state.address,\n      //     description: this.state.description,\n      //     campusId: this.state.campusID\n      // };\n      // // Add new student in back-end database\n      // let editCampus = this.props.editCampus(campus);\n      // // Update state, and trigger redirect to show the new student\n      // if (editCampus){\n      //   this.setState({\n      //     name: \"\", \n      //     description: \"\", \n      //     campusID: null, \n      //     redirect: true, \n      //     redirectId: editCampus.id\n      //   });\n      // }\n\n      const update = {\n        name: this.state.name,\n        address: this.state.address,\n        description: this.state.description,\n        campusId: this.state.campusID\n      };\n      this.props.editCampusThunk(this.id, update);\n      this.setState({\n        name: \"\",\n        address: \"\",\n        description: \"\",\n        redirect: true,\n        redirectID: this.state.campusID\n      });\n    };\n\n    this.state = {\n      name: campus.name,\n      address: campus.address,\n      description: campus.description,\n      campusID: campus.campusID,\n      redirect: false,\n      redirectID: null\n    };\n  } // Capture input data when it is entered\n\n\n  //       // Unmount when the component is being removed from the DOM:\n  //   componentWillUnmount() { \n  //     this.setState({redirect: false, redirectId: null});\n  // }   \n  render() {\n    // Redirect to new student's page after submit\n    if (this.state.redirect) {\n      return /*#__PURE__*/_jsxDEV(Redirect, {\n        to: `/campus/${this.state.redirectId}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 15\n      }, this);\n    } // Display the input form via the corresponding View component\n\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(EditCampusView, {\n        campus: this.props.campus,\n        handleChange: this.handleChange,\n        handleSubmit: this.handleSubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this);\n  }\n\n} // The following input argument is passed to the \"connect\" function used by \"NewStudentContainer\" component to connect to Redux Store.\n// The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\n\n\nconst mapDispatch = dispatch => {\n  return {\n    fetchCampus: id => dispatch(fetchCampusThunk(id)),\n    eidtCampus: campus => dispatch(editCampusThunk(campus))\n  };\n};\n\nexport default connect(null, mapDispatch)(EditCampusContainer);","map":{"version":3,"names":["Header","Component","connect","Redirect","campus","editCampusThunk","EditCampusView","fetchCampusThunk","EditCampusContainer","componentDidMount","props","fetchCampus","match","params","id","constructor","handleChange","event","setState","target","name","value","handleSubmit","preventDefault","update","state","address","description","campusId","campusID","redirect","redirectID","render","redirectId","mapDispatch","dispatch","eidtCampus"],"sources":["C:/Users/Joey/Full-Stack-CRUD-Application-Client/src/components/containers/EditCampusContainer.js"],"sourcesContent":["/*==================================================\r\nEditCampusContainer.js\r\n\r\nThe Container component is responsible for stateful logic and data fetching, and\r\npasses data (if any) as props to the corresponding View component.\r\nIf needed, it also defines the component's \"connect\" function.\r\n================================================== */\r\nimport Header from './Header';\r\nimport { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\nimport campus from \"../../store/reducers/campus\";\r\nimport { editCampusThunk } from '../../store/thunks';\r\nimport EditCampusView from '../views/EditCampusView';\r\nimport { fetchCampusThunk } from \"../../store/thunks\";\r\n\r\n// import {editCampus} from '../store/actions/actionCreators.js';\r\n\r\nclass EditCampusContainer extends Component {\r\n   // Get the specific campus data from back-end database\r\n   componentDidMount() {\r\n    // Get campus ID from URL (API link)\r\n    this.props.fetchCampus(this.props.match.params.id);\r\n  }\r\n    //Get Data from database\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            name: campus.name,\r\n            address: campus.address,\r\n            description: campus.description,\r\n            campusID: campus.campusID,\r\n            redirect: false,\r\n            redirectID: null\r\n        };\r\n    }\r\n      // Capture input data when it is entered\r\n  handleChange = event => {\r\n    this.setState({\r\n      [event.target.name]: event.target.value\r\n    });\r\n  }\r\n\r\n    // Take action after user click the submit button\r\n    handleSubmit = async event => {\r\n        event.preventDefault();  // Prevent browser reload/refresh after submit.\r\n    \r\n        // let campus = {\r\n        //     name: this.state.name,\r\n        //     address: this.state.address,\r\n        //     description: this.state.description,\r\n        //     campusId: this.state.campusID\r\n        // };\r\n        \r\n        // // Add new student in back-end database\r\n        // let editCampus = this.props.editCampus(campus);\r\n    \r\n        // // Update state, and trigger redirect to show the new student\r\n        // if (editCampus){\r\n        //   this.setState({\r\n        //     name: \"\", \r\n        //     description: \"\", \r\n        //     campusID: null, \r\n        //     redirect: true, \r\n        //     redirectId: editCampus.id\r\n        //   });\r\n        // }\r\n        const update = {\r\n              name: this.state.name,\r\n              address: this.state.address,\r\n              description: this.state.description,\r\n              campusId: this.state.campusID\r\n          };\r\n          this.props.editCampusThunk(this.id, update);\r\n          this.setState({\r\n            name:\"\",\r\n            address: \"\",\r\n            description: \"\",\r\n            redirect: true,\r\n            redirectID: this.state.campusID\r\n          });\r\n          \r\n      };\r\n//       // Unmount when the component is being removed from the DOM:\r\n//   componentWillUnmount() { \r\n//     this.setState({redirect: false, redirectId: null});\r\n// }   \r\n    render() {\r\n    // Redirect to new student's page after submit\r\n    if(this.state.redirect) {\r\n      return (<Redirect to={`/campus/${this.state.redirectId}`}/>)\r\n    }\r\n\r\n    // Display the input form via the corresponding View component\r\n    return (\r\n      <div>\r\n        <Header />\r\n        <EditCampusView \r\n          campus={this.props.campus} \r\n          handleChange = {this.handleChange} \r\n          handleSubmit={this.handleSubmit}      \r\n        />\r\n      </div>          \r\n    );\r\n  }\r\n}\r\n\r\n// The following input argument is passed to the \"connect\" function used by \"NewStudentContainer\" component to connect to Redux Store.\r\n// The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\r\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\r\nconst mapDispatch = (dispatch) => {\r\n    return({\r\n      fetchCampus: (id) => dispatch(fetchCampusThunk(id)),\r\n        eidtCampus: (campus) => dispatch(editCampusThunk(campus)),\r\n    })\r\n}\r\nexport default connect(null, mapDispatch)(EditCampusContainer);"],"mappings":"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"},"metadata":{},"sourceType":"module"}